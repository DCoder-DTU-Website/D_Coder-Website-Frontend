import React from 'react';
import { InjectedProps, RippledComponentProps } from '@material/react-ripple';
import { MDCChipFoundation } from '@material/chips/chip/foundation';
import { MDCChipAdapter } from '@material/chips/chip/adapter';
export interface ChipProps extends InjectedProps<HTMLDivElement> {
    id?: string;
    label?: string;
    className?: string;
    selected?: boolean;
    handleSelect?: (id: string, selected: boolean) => void;
    handleRemove?: (id: string) => void;
    handleInteraction?: (id: string) => void;
    handleTrailingIconInteraction?: (id: string) => void;
    onClick?: React.MouseEventHandler<HTMLDivElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLDivElement>;
    onTransitionEnd?: React.TransitionEventHandler<HTMLDivElement>;
    chipCheckmark?: React.ReactElement<HTMLElement>;
    leadingIcon?: React.ReactElement<HTMLElement>;
    shouldRemoveOnTrailingIconClick?: boolean;
    trailingIcon?: React.ReactElement<HTMLElement>;
    initRipple: (surface: HTMLElement | null) => void;
}
declare type ChipState = {
    classList: Set<string>;
    leadingIconClassList: Set<string>;
};
export declare class Chip extends React.Component<ChipProps, ChipState> {
    chipElement: HTMLDivElement | null;
    foundation: MDCChipFoundation;
    static defaultProps: Partial<ChipProps>;
    state: ChipState;
    componentDidMount(): void;
    componentDidUpdate(prevProps: ChipProps): void;
    componentWillUnmount(): void;
    init: (el: HTMLDivElement | null) => void;
    readonly classes: string;
    readonly adapter: MDCChipAdapter;
    onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onKeyDown: (e: React.KeyboardEvent<HTMLDivElement>) => void;
    handleTrailingIconClick: (e: React.MouseEvent<Element, MouseEvent>) => void;
    handleTransitionEnd: (e: React.TransitionEvent<HTMLDivElement>) => void;
    renderLeadingIcon: (leadingIcon: React.ReactElement<HTMLElement, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) => React.ReactElement<HTMLElement, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
    renderTrailingIcon: (trailingIcon: React.ReactElement<HTMLElement, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) => React.ReactElement<HTMLElement, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
    render(): JSX.Element;
}
declare const _default: import("react").ComponentType<Pick<ChipProps, "label" | "selected" | "id" | "onClick" | "onTransitionEnd" | "trailingIcon" | "handleSelect" | "handleRemove" | "handleInteraction" | "handleTrailingIconInteraction" | "chipCheckmark" | "leadingIcon" | "shouldRemoveOnTrailingIconClick"> & RippledComponentProps<HTMLDivElement>>;
export default _default;
