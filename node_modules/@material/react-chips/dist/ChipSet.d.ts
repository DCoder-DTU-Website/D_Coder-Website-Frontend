import React from 'react';
import { MDCChipSetFoundation } from '@material/chips/chip-set/foundation';
import ChipCheckmark from './ChipCheckmark';
import { ChipProps } from './Chip';
declare type ChipType = React.ReactElement<ChipProps>;
export interface ChipSetProps {
    className?: string;
    selectedChipIds?: string[];
    handleSelect?: (selectedChipIds: string[]) => void;
    updateChips?: (chips: Partial<ChipProps>[]) => void;
    choice?: boolean;
    filter?: boolean;
    input?: boolean;
    children: ChipType | ChipType[] | React.ReactNode;
}
interface ChipSetState {
    foundation: MDCChipSetFoundation | null;
    selectedChipIds: string[];
    hasInitialized: boolean;
}
export default class ChipSet extends React.Component<ChipSetProps, ChipSetState> {
    checkmarkWidth: number;
    constructor(props: ChipSetProps);
    static defaultProps: Partial<ChipSetProps>;
    componentDidMount(): void;
    componentDidUpdate(prevProps: ChipSetProps, prevState: ChipSetState): void;
    componentWillUnmount(): void;
    readonly classes: string;
    readonly adapter: {
        hasClass: (className: string) => boolean;
        setSelected: () => void;
        removeChip: (chipId: string) => void;
    };
    initChipSelection(): void;
    handleInteraction: (chipId: string) => void;
    handleSelect: (chipId: string, selected: boolean) => void;
    handleRemove: (chipId: string) => void;
    removeChip: (chipId: string) => void;
    setCheckmarkWidth: (checkmark: ChipCheckmark | null) => void;
    computeBoundingRect: (chipElement: HTMLDivElement) => {
        height: number;
        width: number;
    };
    renderChip: (chip?: React.ReactNode) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
    render(): JSX.Element | null;
}
export {};
